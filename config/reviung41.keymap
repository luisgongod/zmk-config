/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>


/ {
    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        U_I {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <19 20>;
        };

        I_O {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <21 20>;
        };

        O_P {
            bindings = <&kp QUESTION>;
            key-positions = <22 21>;
        };

        J_K {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
        };

        K_L {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <32 33>;
        };

        L_Semi {
            bindings = <&kp BACKSLASH>;
            key-positions = <33 34>;
        };

        M_Coma {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <45 46>;
        };

        Coma_Dot {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <47 46>;
        };

        Dot_Backslash {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <47 48>;
        };

        Q_W {
            bindings = <&kp EXCLAMATION>;
            key-positions = <13 14>;
        };

        W_E {
            bindings = <&kp PERCENT>;
            key-positions = <14 15>;
        };

        E_R {
            bindings = <&kp UNDER>;
            key-positions = <15 16>;
        };

        A_S {
            bindings = <&kp AMPS>;
            key-positions = <25 26>;
        };

        S_D {
            bindings = <&kp ESC>;
            key-positions = <26 27>;
        };

        D_F {
            bindings = <&kp COLON>;
            key-positions = <27 28>;
        };

        Z_X {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 38>;
        };

        X_C {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <38 39>;
        };

        C_V {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <40 39>;
        };

        U_I_O {
            bindings = <&kp CARET>;
            key-positions = <19 20 21>;
        };

        I_O_P {
            bindings = <&kp TILDE>;
            key-positions = <20 21 22>;
        };

        W_E_R {
            bindings = <&kp DOLLAR>;
            key-positions = <14 15 16>;
        };

        Q_W_E {
            bindings = <&kp GRAVE>;
            key-positions = <15 13 14>;
        };

        M_Coma_Dot {
            bindings = <&kp ASTRK>;
            key-positions = <45 46 47>;
        };

        Coma_Dot_Slash {
            bindings = <&kp SLASH>;
            key-positions = <46 47 48>;
        };

        Z_X_C {
            bindings = <&kp PIPE>;
            key-positions = <37 38 39>;
        };

        R_T {
            bindings = <&kp EQUAL>;
            key-positions = <17 16>;
        };

        F_G {
            bindings = <&kp HASH>;
            key-positions = <28 29>;
        };

        V_B {
            bindings = <&kp LESS_THAN>;
            key-positions = <41 40>;
        };

        Y_U {
            bindings = <&kp PLUS>;
            key-positions = <18 19>;
        };

        H_J {
            bindings = <&kp MINUS>;
            key-positions = <30 31>;
        };

        N_M {
            bindings = <&kp GREATER_THAN>;
            key-positions = <44 45>;
        };

        S_D_F {
            bindings = <&kp HOME>;
            key-positions = <26 28 27>;
        };

        J_K_L {
            bindings = <&kp END>;
            key-positions = <31 32 33>;
        };

        A_S_D {
            bindings = <&kp CAPSLOCK>;
            key-positions = <25 27 26>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
            //                         | ALT | LWR | SPC | RSE  | ALT |

            bindings = <
   &kp TAB   &kp Q      &kp W   &kp E     &kp R   &kp T                   &kp Y   &kp U      &kp I    &kp O     &kp P       &kp BSPC
 &kp LCTRL   &kp A      &kp S   &kp D     &kp F   &kp G                   &kp H   &kp J      &kp K    &kp L  &kp SEMI        &kp SQT
 &kp LSHFT   &kp Z      &kp X   &kp C     &kp V   &kp B                   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt RSHFT RET
  &kp LALT   &mo 1  &kp SPACE   &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // ----------------------------------------------------------------------------------
            // |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |    DEL    |
            // |    |  _  |  +  |  {  |  }  | "|" |   | LFT | DWN |  UP | RGT |  `  |     ~     |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | HOME| END | PGUP| PGDN| PRSC| SHFT(RET) |
            //                       |     |     | RET | ADJ |     |

            bindings = <
 &trans   &kp EXCL       &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                  &kp CARET  &kp AMPS     &kp N8   &kp LPAR   &kp RPAR        &kp DEL
 &trans  &kp MINUS  &kp KP_PLUS  &kp LBRC  &kp RBRC   &kp PIPE                   &kp LEFT  &kp DOWN     &kp UP  &kp RIGHT  &kp GRAVE      &kp TILDE
 &trans    &kp ESC     &kp LGUI  &kp LALT  &kp CLCK    &kp DQT                   &kp HOME   &kp END  &kp PG_UP  &kp PG_DN  &kp PSCRN  &mt RSHFT RET
 &trans     &trans      &kp RET     &mo 3    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
            // |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
            //                       |     | ADJ | BKSP |    |     |

            bindings = <
 &trans     &kp N1     &kp N2    &kp N3    &kp N4    &kp N5                  &kp N6  &kp N7  &kp N8   &kp N9   &kp N0  &kp DEL
 &trans  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH                  &kp F1  &kp F2  &kp F3   &kp F4   &kp F5   &kp F6
 &trans    &kp ESC   &kp LGUI  &kp RALT  &kp CLCK   &kp DQT                  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
 &trans      &mo 3   &kp BSPC    &trans    &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
            // | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |       |     |     |     |     |        |
            // |          |          |          |          |    |         |   | RESET |     |     |     |     |        |
            //                                              |     |     |     |     |     |

            bindings = <
 &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_EFF   &none  &rgb_ug RGB_TOG                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
 &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_EFR   &none            &none                         &none         &none         &none         &none         &none       &none
           &none            &none            &none            &none   &none            &none                        &reset         &none         &none         &none         &none       &none
          &trans           &trans           &tog 3           &trans  &trans
            >;
        };
    };
