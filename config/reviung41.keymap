/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        U_I {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 8>;
        };

        I_O {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <8 9>;
        };

        O_P {
            bindings = <&kp QUESTION>;
            key-positions = <9 10>;
        };

        J_K {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        K_L {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <20 21>;
        };

        L_Semi {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 22>;
        };

        M_Coma {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <31 32>;
        };

        Coma_Dot {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <32 33>;
        };

        Dot_Backslash {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <33 34>;
        };

        Q_W {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 2>;
        };

        W_E {
            bindings = <&kp PERCENT>;
            key-positions = <2 3>;
        };

        E_R {
            bindings = <&kp UNDER>;
            key-positions = <3 4>;
        };

        A_S {
            bindings = <&kp AMPS>;
            key-positions = <13 14>;
        };

        S_D {
            bindings = <&kp ESC>;
            key-positions = <14 15>;
        };

        D_F {
            bindings = <&kp COLON>;
            key-positions = <15 16>;
        };

        Z_X {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <25 26>;
        };

        X_C {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
        };

        C_V {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <28 29>;
        };

        U_I_O {
            bindings = <&kp CARET>;
            key-positions = <7 8 9>;
        };

        I_O_P {
            bindings = <&kp TILDE>;
            key-positions = <8 9 10>;
        };

        W_E_R {
            bindings = <&kp DOLLAR>;
            key-positions = <2 3 4>;
        };

        Q_W_E {
            bindings = <&kp GRAVE>;
            key-positions = <1 2 3>;
        };

        M_Coma_Dot {
            bindings = <&kp ASTRK>;
            key-positions = <31 32 33>;
        };

        Coma_Dot_Slash {
            bindings = <&kp SLASH>;
            key-positions = <32 33 34>;
        };

        Z_X_C {
            bindings = <&kp PIPE>;
            key-positions = <25 26 27>;
        };

        R_T {
            bindings = <&kp EQUAL>;
            key-positions = <4 5>;
        };

        F_G {
            bindings = <&kp HASH>;
            key-positions = <16 17>;
        };

        V_B {
            bindings = <&kp LESS_THAN>;
            key-positions = <28 29>;
        };

        Y_U {
            bindings = <&kp PLUS>;
            key-positions = <6 7>;
        };

        H_J {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        N_M {
            bindings = <&kp GREATER_THAN>;
            key-positions = <30 31>;
        };

        S_D_F {
            bindings = <&kp HOME>;
            key-positions = <14 15 16>;
        };

        J_K_L {
            bindings = <&kp END>;
            key-positions = <19 20 21>;
        };

        A_S_D {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 14 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
            //                         | ALT | LWR | SPC | RSE  | ALT |

            bindings = <
          &kp TAB   &kp Q   &kp W   &kp E     &kp R   &kp T              &kp Y         &kp U      &kp I    &kp O     &kp P        &kp DEL
   &kp LEFT_SHIFT   &kp A   &kp S   &kp D     &kp F   &kp G              &kp H         &kp J      &kp K    &kp L  &kp SEMI        &kp SQT
 &kp LEFT_CONTROL   &kp Z   &kp X   &kp C     &kp V   &kp B              &kp N         &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt RSHFT RET
                                           &kp LALT   &mo 1  &kp SPACE   &mo 2  &kp LEFT_WIN
            >;
        };

        lower_layer {
            // ----------------------------------------------------------------------------------
            // |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |    DEL    |
            // |    |  _  |  +  |  {  |  }  | "|" |   | LFT | DWN |  UP | RGT |  `  |     ~     |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | HOME| END | PGUP| PGDN| PRSC| SHFT(RET) |
            //                       |     |     | RET | ADJ |     |

            bindings = <
 &trans   &kp F1   &kp F2  &kp F3  &kp F4   &kp F5            &kp PLUS  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK  &trans
 &trans   &kp F6   &kp F7  &kp F8  &kp F9  &kp F10            &kp MINUS  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6     &kp SLASH  &trans
 &trans  &kp F11  &kp F12  &trans  &trans   &trans  &trans    &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3         &none  &trans
                                             &trans     &trans  &kp ESC      &mo 3    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
            // |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
            //                       |     | ADJ | BKSP |    |     |

            bindings = <
 &trans       &none            &none          &none      &none   &none                  &kp C_VOL_UP     &kp PAGE_DOWN         &kp UP  &kp PG_UP          &trans  &trans
 &trans    &kp HOME          &kp END  &kp PAGE_DOWN  &kp PG_UP  &kp F5                  &kp C_VOL_DN          &kp LEFT       &kp DOWN  &kp RIGHT  &kp LEFT_SHIFT  &trans
 &trans  &kp INSERT  &kp PRINTSCREEN          &none      &none   &none  &trans         &trans  &kp C_PLAY_PAUSE  &kp PAGE_DOWN  &kp PG_UP          &trans  &trans
                                           &trans     &mo 3  &kp BSPC  &trans  &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
            // | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |       |     |     |     |     |        |
            // |          |          |          |          |    |         |   | RESET |     |     |     |     |        |
            //                                              |     |     |     |     |     |

            bindings = <
 &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_EFF   &none  &rgb_ug RGB_TOG          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
 &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_EFR   &none            &none                 &none         &none         &none         &none         &none       &none
           &none            &none            &none            &none   &none            &none                &reset         &none         &none         &none         &none       &none
                                                                     &trans           &trans  &tog 3        &trans        &trans
            >;
        };
    };
};
